{"docstore/metadata": {"data/Riverpod.txt": {"doc_hash": "95227ebf5ad46fe8c988e0e60f4aa5ff6ec2882ed078f876ec2b3bdb5b7109cd"}, "bff79b29-b9fc-4071-b78d-7c2ea5760f7d": {"doc_hash": "95227ebf5ad46fe8c988e0e60f4aa5ff6ec2882ed078f876ec2b3bdb5b7109cd", "ref_doc_id": "data/Riverpod.txt"}}, "docstore/data": {"bff79b29-b9fc-4071-b78d-7c2ea5760f7d": {"__data__": {"id_": "bff79b29-b9fc-4071-b78d-7c2ea5760f7d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "data/Riverpod.txt", "node_type": null, "metadata": {}, "hash": "95227ebf5ad46fe8c988e0e60f4aa5ff6ec2882ed078f876ec2b3bdb5b7109cd"}}, "hash": "95227ebf5ad46fe8c988e0e60f4aa5ff6ec2882ed078f876ec2b3bdb5b7109cd", "text": "Why Riverpod?\nWhat is Riverpod?\nRiverpod (anagram of Provider) is a reactive caching framework for Flutter/Dart.\n\nUsing declararive and reactive programming, Riverpod is able to take care of a large part of your application's logic for you. It can perform network-requests with built-in error handling and caching, while automatically re-fetching data when necessary.\n\nMotivation\nModern applications rarely come with all the information necessary to render their User Interface. Instead, the data is often fetched asynchronously from a server.\n\nThe problem is, working with asynchronous code is hard. Although Flutter comes with some way to create state variables and refresh the UI on change, it is still fairly limited. A number of challenges remain unsolved:\n\nAsynchronous requests need to be cached locally, as it would be unreasonable to re-execute them whenever the UI updates.\nSince we have a cache, our cache could get out of date if we're not careful.\nWe also need to handle errors and loading states\nNailing those problems at scale can be difficult, and they are impacted by a large amount of features, such as:\n\npull to refresh\ninfinite lists / fetch as we scroll\nsearch as we type\ndebouncing asynchronous requests\ncancelling asynchronous requests when no-longer used\noptimistic UIs\noffline mode\n...\nThese features can be tricky to implement, but are crucial for a good user experience.\nYet few packages try to tackle those problems directly, and a lot of the work has to be done manually.\n\nThat's where Riverpod comes in.\nRiverpod tries to solve those problems, by offering a new unique way of writing business logic, inspired by Flutter widgets. In many ways Riverpod is comparable to widgets, but for state.\n\nUsing this new approach, these complex features are mostly done by default. All that's left is to focus on your UI.", "start_char_idx": 0, "end_char_idx": 1838, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"data/Riverpod.txt": {"node_ids": ["bff79b29-b9fc-4071-b78d-7c2ea5760f7d"], "metadata": {}}}}